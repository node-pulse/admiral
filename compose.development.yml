x-common-variables: &common-variables
  DATABASE_URL: &database-url postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-node_pulse_admiral}?sslmode=disable

services:
  # PostgreSQL 18 - Main Database
  postgres:
    image: postgres:18-alpine@sha256:f898ac406e1a9e05115cc2efcb3c3abb3a92a4c0263f3b6f6aaae354cbb1953a
    container_name: node-pulse-postgres
    env_file:
      - .env
    environment:
      <<: *common-variables
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-node_pulse_admiral}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER:-postgres}
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node-pulse-admiral

  # Valkey - Redis alternative for caching and sessions
  valkey:
    image: valkey/valkey:latest@sha256:81db6d39e1bba3b3ff32bd3a1b19a6d69690f94a3954ec131277b9a26b95b3aa
    container_name: node-pulse-valkey
    env_file:
      - .env
    command: valkey-server --appendonly yes --requirepass ${VALKEY_PASSWORD:-valkeypassword}
    volumes:
      - ./valkey_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test:
        - CMD
        - valkey-cli
        - --raw
        - incr
        - ping
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node-pulse-admiral

  # Flagship Migration - Run database migrations (idempotent)
  flagship-migrate:
    build:
      context: .
      dockerfile: ./migrate/Dockerfile
    container_name: node-pulse-flagship-migrate
    env_file:
      - .env
    environment:
      <<: *common-variables
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrate/migrations:/app/migrations # Mount migrations for hot reload in dev
    networks:
      - node-pulse-admiral
    restart: "no"

  # Go-Gin Submarines Ingest - Agent Metrics Ingestion (HTTP -> Valkey Stream)
  submarines-ingest:
    build:
      context: ./submarines
      dockerfile: Dockerfile.ingest.dev
    container_name: node-pulse-submarines-ingest
    env_file:
      - .env
    environment:
      <<: *common-variables
      MASTER_KEY_PATH: /secrets/master.key
    ports:
      - "8080:8080" # Hardcoded for Cloudflare Tunnel
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    volumes:
      - ./submarines:/app
      - ./secrets:/secrets:ro
    networks:
      - node-pulse-admiral

  # Go Submarines Digest - Background processor (Valkey Stream -> PostgreSQL)
  submarines-digest:
    build:
      context: ./submarines
      dockerfile: Dockerfile.digest.dev
    container_name: node-pulse-submarines-digest
    env_file:
      - .env
    environment:
      <<: *common-variables
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    volumes:
      - ./submarines:/app
    networks:
      - node-pulse-admiral

  # Go Submarines Status - Public status pages and badges (read-only)
  submarines-status:
    build:
      context: ./submarines
      dockerfile: Dockerfile.status.dev
    container_name: node-pulse-submarines-status
    env_file:
      - .env
    environment:
      <<: *common-variables
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./submarines:/app
    networks:
      - node-pulse-admiral

  # Go Submarines SSH WebSocket - Interactive terminal access
  submarines-sshws:
    build:
      context: ./submarines
      dockerfile: Dockerfile.sshws.dev
    container_name: node-pulse-submarines-sshws
    env_file:
      - .env
    environment:
      <<: *common-variables
      MASTER_KEY_PATH: /secrets/master.key
    ports:
      - "6001:6001" # local development
    depends_on:
      postgres:
        condition: service_healthy
      flagship-migrate:
        condition: service_completed_successfully
    volumes:
      - ./submarines:/app
      - ./secrets:/secrets:ro
    networks:
      - node-pulse-admiral

  # Laravel Flagship - Admin Dashboard
  flagship:
    build:
      context: ./flagship
      dockerfile: Dockerfile.dev # Development build with hot reload
    container_name: node-pulse-flagship
    env_file:
      - .env
    ports:
      - "8000:8000" # Laravel dev server
      - "5173:5173" # Vite dev server
      - "9003:9003" # Xdebug port
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
      flagship-migrate:
        condition: service_completed_successfully
      submarines-ingest:
        condition: service_started
    volumes:
      - ./flagship:/var/www/html # Mount entire app for hot reload
      - ./logs/flagship:/var/www/html/storage/logs
      - ./secrets:/secrets:ro
      - ./flagship/docker-entrypoint-dev.sh:/usr/local/bin/docker-entrypoint-dev.sh:ro
    networks:
      - node-pulse-admiral
    # Override CMD to run both Laravel dev server and Vite HMR
    command: ["/bin/bash", "/usr/local/bin/docker-entrypoint-dev.sh"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # Caddy - Reverse Proxy (Development)
  # =============================================================================
  caddy:
    image: caddy:2-alpine
    container_name: node-pulse-caddy
    env_file:
      - .env
    ports:
      - "80:80"       # HTTP (Flagship via PHP-FPM)
    volumes:
      # Use development Caddyfile
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro

      # Flagship public directory (for serving static files)
      - ./flagship/public:/var/www/flagship/public:ro

      # Logs
      - ./logs/caddy:/var/log/caddy
    depends_on:
      - flagship
      - submarines-ingest
      - submarines-status
    networks:
      - node-pulse-admiral
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

networks:
  node-pulse-admiral:
    driver: bridge
    name: node-pulse-admiral
