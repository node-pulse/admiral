# Production Dockerfile for Laravel with Ansible
# Clean PHP-FPM only - Caddy handles HTTP in separate container

# ------------------------------------------------------------
# Stage 1: PHP Base with Extensions (Pre-compiled)
# ------------------------------------------------------------
FROM ghcr.io/node-pulse/node-pulse-flagship-base:latest AS php-base

# Base image already includes:
# - PHP 8.3 FPM Alpine
# - All Laravel extensions (intl, mbstring, zip, bcmath, pcntl, pdo_pgsql, pgsql, opcache)
# - Ansible, Python3, SSH tools
# - Production PHP configuration
# - Optimized OPcache settings

# No additional setup needed - extensions are pre-compiled!

# ------------------------------------------------------------
# Stage 2: Composer Dependencies
# ------------------------------------------------------------
FROM composer:2 AS vendor

WORKDIR /app

# Copy composer files
COPY composer.json composer.lock ./

# Install production dependencies only (no dev dependencies)
RUN composer install \
    --no-dev \
    --no-interaction \
    --no-scripts \
    --prefer-dist \
    --optimize-autoloader

# ------------------------------------------------------------
# Stage 3: Frontend Assets Build
# ------------------------------------------------------------
FROM node:22-alpine AS frontend

WORKDIR /app

# Install PHP for Laravel Wayfinder (needed during build)
RUN apk add --no-cache \
    php83 \
    php83-pdo \
    php83-pdo_pgsql \
    php83-mbstring \
    php83-xml \
    php83-tokenizer \
    php83-fileinfo \
    php83-dom \
    php83-phar \
    php83-openssl \
    php83-curl \
    php83-ctype \
    php83-session

# Copy composer files and vendor from vendor stage
COPY composer.json composer.lock ./
COPY --from=vendor /app/vendor ./vendor

# Copy package files
COPY package*.json ./

# Install Node dependencies
RUN npm ci

# Copy application code
COPY . .

# Build production assets
RUN npm run build

# ------------------------------------------------------------
# Stage 4: Production Image (PHP-FPM Only)
# ------------------------------------------------------------
FROM php-base AS production

# Set environment
ENV APP_ENV=production \
    APP_DEBUG=false

# Create non-root user matching host UID/GID
ARG UID=1000
ARG GID=1000

RUN delgroup dialout 2>/dev/null || true \
    && addgroup -g ${GID} -S laravel \
    && adduser -u ${UID} -S laravel -G laravel

# Configure PHP-FPM to run as laravel user
RUN sed -i "s/user = www-data/user = laravel/g" /usr/local/etc/php-fpm.d/www.conf \
    && sed -i "s/group = www-data/group = laravel/g" /usr/local/etc/php-fpm.d/www.conf \
    && echo "php_admin_flag[log_errors] = on" >> /usr/local/etc/php-fpm.d/www.conf

# Set working directory
WORKDIR /var/www/html

# Copy application code
COPY --chown=laravel:laravel . .

# Copy vendor from composer stage
COPY --from=vendor --chown=laravel:laravel /app/vendor ./vendor

# Copy built assets from frontend stage
COPY --from=frontend --chown=laravel:laravel /app/public/build ./public/build

# Create storage directories and set permissions
RUN mkdir -p \
    storage/logs \
    storage/framework/sessions \
    storage/framework/views \
    storage/framework/cache \
    storage/framework/testing \
    storage/app/public \
    bootstrap/cache \
    && chown -R laravel:laravel storage bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache

# Expose PHP-FPM port
EXPOSE 9000

# Health check - verify PHP-FPM is listening on port 9000
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD pidof php-fpm || exit 1

# Run PHP-FPM as root (master process)
# Worker processes will run as 'laravel' user (configured in www.conf at lines 124-126)
CMD ["php-fpm", "-F", "-R"]
