---
# Ansible Playbook: Upgrade Node Pulse Agent to Latest Version
#
# Usage:
#   ansible-playbook playbooks/nodepulse/upgrade-agent.yml -i inventory.yml
#
#   # Upgrade to specific version:
#   ansible-playbook playbooks/nodepulse/upgrade-agent.yml -i inventory.yml -e agent_version=0.1.11
#
# This playbook:
# 1. Checks current agent version
# 2. Downloads latest version from GitHub releases
# 3. Backs up current binary
# 4. Replaces binary with new version
# 5. Restarts agent service
#
# Prerequisites:
# - Node Pulse Agent must be already installed
# - Agent must be running as systemd service

- name: Upgrade Node Pulse Agent
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    agent_version: "{{ agent_version | default('latest') }}"
    agent_install_dir: "/opt/nodepulse"
    agent_github_owner: "node-pulse"
    agent_github_repo: "agent"

  tasks:
    - name: Check if agent is installed
      stat:
        path: "{{ agent_install_dir }}/nodepulse"
      register: agent_binary

    - name: Fail if agent is not installed
      fail:
        msg: |
          Agent is not installed on {{ inventory_hostname }}
          Use deploy-agent.yml for initial deployment
      when: not agent_binary.stat.exists

    - name: Get current agent version
      command: "{{ agent_install_dir }}/nodepulse --version"
      register: current_version
      changed_when: false
      failed_when: false

    - name: Display current version
      debug:
        msg: "Current version: {{ current_version.stdout | default('unknown') }}"

    - name: Stop nodepulse service
      systemd:
        name: nodepulse
        state: stopped

    - name: Backup current binary
      copy:
        src: "{{ agent_install_dir }}/nodepulse"
        dest: "{{ agent_install_dir }}/nodepulse.backup-{{ ansible_date_time.iso8601_basic_short }}"
        remote_src: yes
        mode: "0755"

    - name: Detect CPU architecture
      set_fact:
        agent_arch: >-
          {{
            'amd64' if ansible_architecture == 'x86_64'
            else 'arm64' if ansible_architecture == 'aarch64'
            else 'unknown'
          }}

    - name: Fail if unsupported architecture
      fail:
        msg: "Unsupported architecture: {{ ansible_architecture }}"
      when: agent_arch == 'unknown'

    - name: Get latest release info if using 'latest'
      uri:
        url: "https://api.github.com/repos/{{ agent_github_owner }}/{{ agent_github_repo }}/releases/latest"
        return_content: yes
      register: latest_release
      when: agent_version == 'latest'

    - name: Extract version from tag_name
      set_fact:
        resolved_version: "{{ latest_release.json.tag_name | regex_replace('^v', '') }}"
      when: agent_version == 'latest'

    - name: Use specified version
      set_fact:
        resolved_version: "{{ agent_version | regex_replace('^v', '') }}"
      when: agent_version != 'latest'

    - name: Set download URL
      set_fact:
        archive_filename: "nodepulse-{{ resolved_version }}-linux-{{ agent_arch }}.tar.gz"
        download_url: "https://github.com/{{ agent_github_owner }}/{{ agent_github_repo }}/releases/download/v{{ resolved_version }}/nodepulse-{{ resolved_version }}-linux-{{ agent_arch }}.tar.gz"
        checksum_url: "https://github.com/{{ agent_github_owner }}/{{ agent_github_repo }}/releases/download/v{{ resolved_version }}/checksums.txt"

    - name: Download checksums file
      get_url:
        url: "{{ checksum_url }}"
        dest: "/tmp/nodepulse-checksums.txt"
        mode: "0644"
        force: yes
      register: checksum_download
      retries: 3
      delay: 5

    - name: Extract expected checksum
      shell: "grep '{{ archive_filename }}' /tmp/nodepulse-checksums.txt | awk '{print $1}'"
      register: expected_checksum
      changed_when: false

    - name: Download agent archive
      get_url:
        url: "{{ download_url }}"
        dest: "/tmp/{{ archive_filename }}"
        checksum: "sha256:{{ expected_checksum.stdout }}"
        mode: "0644"
        force: yes
      register: download_result
      retries: 3
      delay: 5

    - name: Extract agent archive
      unarchive:
        src: "/tmp/{{ archive_filename }}"
        dest: "/tmp"
        remote_src: yes

    - name: Replace binary with new version
      copy:
        src: "/tmp/nodepulse"
        dest: "{{ agent_install_dir }}/nodepulse"
        remote_src: yes
        owner: nodepulse
        group: nodepulse
        mode: "0755"

    - name: Clean up temporary files
      file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - nodepulse
        - "{{ archive_filename }}"
        - nodepulse-checksums.txt
        - README.md
        - nodepulse.yml
      ignore_errors: yes

    - name: Verify new version
      command: "{{ agent_install_dir }}/nodepulse --version"
      register: new_version
      changed_when: false

    - name: Start nodepulse service
      systemd:
        name: nodepulse
        state: started
        enabled: yes

    - name: Wait for service to be active
      wait_for:
        timeout: 5

    - name: Verify service is running
      systemd:
        name: nodepulse
      register: service_status

    - name: Display upgrade summary
      debug:
        msg: |
          âœ“ Agent upgraded successfully on {{ inventory_hostname }}

          Old version: {{ current_version.stdout | default('unknown') }}
          New version: {{ new_version.stdout }}
          Service status: {{ service_status.status.ActiveState }}

          Backup saved at: {{ agent_install_dir }}/nodepulse.backup-{{ ansible_date_time.iso8601_basic_short }}

          To rollback:
            systemctl stop nodepulse
            cp {{ agent_install_dir }}/nodepulse.backup-* {{ agent_install_dir }}/nodepulse
            systemctl start nodepulse
