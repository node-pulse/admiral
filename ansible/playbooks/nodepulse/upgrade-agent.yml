---
- name: Upgrade Node Pulse Agent
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    # Agent version (GitHub release tag) - REQUIRED for upgrades
    agent_version: "{{ agent_version | mandatory }}"

    # GitHub repository configuration
    agent_github_owner: "node-pulse"
    agent_github_repo: "agent"

    # Download URL (GitHub Releases)
    # For "latest" version, GitHub provides a special redirect URL
    # Otherwise, use specific version tag (e.g., v0.1.6 or 0.1.6)
    agent_download_url: "https://github.com/{{ agent_github_owner }}/{{ agent_github_repo }}/releases/{{ 'latest/download' if agent_version == 'latest' else 'download/v' + agent_version }}"

    # Installation paths
    agent_install_dir: "/opt/nodepulse"
    agent_config_dir: "/etc/nodepulse"
    agent_data_dir: "/var/lib/nodepulse"

  pre_tasks:
    - name: Display upgrade information
      debug:
        msg: |
          Upgrading Node Pulse Agent on {{ inventory_hostname }}
          Target Version: {{ agent_version }}

    - name: Ensure server is reachable
      wait_for_connection:
        timeout: 30
      register: connection_test
      ignore_errors: yes

    - name: Fail if server is unreachable
      fail:
        msg: "Server {{ inventory_hostname }} is unreachable"
      when: connection_test is failed

    - name: Check if agent is installed
      stat:
        path: "{{ agent_install_dir }}/nodepulse"
      register: agent_binary

    - name: Fail if agent is not installed
      fail:
        msg: |
          Agent is not installed on {{ inventory_hostname }}
          Use deploy-agent.yml for initial deployment
      when: not agent_binary.stat.exists

    - name: Get current agent version
      command: "{{ agent_install_dir }}/nodepulse --version"
      register: current_version
      changed_when: false
      failed_when: false

    - name: Display current version
      debug:
        msg: "Current version: {{ current_version.stdout | default('unknown') }}"

  tasks:
    - name: Stop nodepulse service
      systemd:
        name: nodepulse
        state: stopped
      register: service_stopped

    - name: Backup current binary
      copy:
        src: "{{ agent_install_dir }}/nodepulse"
        dest: "{{ agent_install_dir }}/nodepulse.backup"
        remote_src: yes
        mode: "0755"
      when: agent_binary.stat.exists

    - name: Detect CPU architecture
      set_fact:
        agent_arch: >-
          {{
            'amd64' if ansible_architecture == 'x86_64'
            else 'arm64' if ansible_architecture == 'aarch64'
            else 'unknown'
          }}

    - name: Fail if unsupported architecture
      fail:
        msg: "Unsupported architecture: {{ ansible_architecture }}"
      when: agent_arch == 'unknown'

    - name: Get latest release tag if using 'latest'
      uri:
        url: "https://api.github.com/repos/{{ agent_github_owner }}/{{ agent_github_repo }}/releases/latest"
        return_content: yes
      register: latest_release
      when: agent_version == 'latest'

    - name: Extract version from tag_name (remove 'v' prefix)
      set_fact:
        resolved_version: "{{ latest_release.json.tag_name | regex_replace('^v', '') }}"
      when: agent_version == 'latest'

    - name: Use specified version as-is (remove 'v' prefix if present)
      set_fact:
        resolved_version: "{{ agent_version | regex_replace('^v', '') }}"
      when: agent_version != 'latest'

    - name: Determine archive filename
      set_fact:
        archive_filename: "nodepulse-{{ resolved_version }}-linux-{{ agent_arch }}.tar.gz"
        archive_url: "{{ agent_download_url }}/nodepulse-{{ resolved_version }}-linux-{{ agent_arch }}.tar.gz"

    - name: Download checksums file
      get_url:
        url: "{{ agent_download_url }}/checksums.txt"
        dest: "/tmp/nodepulse-checksums.txt"
        mode: "0644"
        force: yes
        timeout: 30
      register: checksum_download
      retries: 3
      delay: 5
      until: checksum_download is succeeded

    - name: Extract expected checksum for our archive
      shell: "grep '{{ archive_filename }}' /tmp/nodepulse-checksums.txt | awk '{print $1}'"
      register: expected_checksum
      changed_when: false

    - name: Download Node Pulse agent archive
      get_url:
        url: "{{ archive_url }}"
        dest: "/tmp/{{ archive_filename }}"
        checksum: "sha256:{{ expected_checksum.stdout }}"
        mode: "0644"
        force: yes
        timeout: 120
      register: download_result
      retries: 3
      delay: 5
      until: download_result is succeeded

    - name: Extract agent archive to temporary location
      unarchive:
        src: "/tmp/{{ archive_filename }}"
        dest: "/tmp"
        remote_src: yes

    - name: Replace binary with new version
      copy:
        src: "/tmp/nodepulse"
        dest: "{{ agent_install_dir }}/nodepulse"
        remote_src: yes
        owner: nodepulse
        group: nodepulse
        mode: "0755"

    - name: Clean up extracted files
      file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - nodepulse
        - README.md
        - nodepulse.yml
      ignore_errors: yes

    - name: Clean up downloaded archive and checksums
      file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - "{{ archive_filename }}"
        - nodepulse-checksums.txt

    - name: Verify binary is executable
      command: "{{ agent_install_dir }}/nodepulse --version"
      register: new_version_check
      changed_when: false
      failed_when: new_version_check.rc != 0

    - name: Start nodepulse service
      systemd:
        name: nodepulse
        state: started
      register: service_started

    - name: Wait for service to be active
      wait_for:
        timeout: 10
      when: service_started.changed

    - name: Check service status
      systemd:
        name: nodepulse
      register: service_status

  post_tasks:
    - name: Display upgrade summary
      debug:
        msg: |
          ✓ Agent upgraded successfully on {{ inventory_hostname }}
          ✓ Old version: {{ current_version.stdout | default('unknown') }}
          ✓ New version: {{ new_version_check.stdout }}
          ✓ Service is {{ service_status.status.ActiveState }}
          ✓ Backup saved at {{ agent_install_dir }}/nodepulse.backup

    - name: Verify agent is reporting metrics
      pause:
        prompt: |

          Upgrade completed. Please verify:
          1. Check dashboard for new metrics from {{ inventory_hostname }}
          2. Verify timestamp alignment in charts
          3. If upgrade failed, restore backup:
             systemctl stop nodepulse
             cp {{ agent_install_dir }}/nodepulse.backup {{ agent_install_dir }}/nodepulse
             systemctl start nodepulse

          Press Enter to continue...
      when: inventory_hostname == ansible_play_hosts[0]
