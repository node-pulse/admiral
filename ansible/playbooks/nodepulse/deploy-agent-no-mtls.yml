---
- name: Deploy Node Pulse Agent (no mTLS)
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    # Agent version (GitHub release tag)
    agent_version: "{{ agent_version | default('latest') }}"

    # GitHub repository configuration
    agent_github_owner: "node-pulse"
    agent_github_repo: "agent"

    # Installation paths
    agent_install_dir: "/opt/nodepulse"
    agent_config_dir: "/etc/nodepulse"
    agent_data_dir: "/var/lib/nodepulse"
    agent_log_dir: "/var/log/nodepulse"

    # Ingest endpoint - passed from Laravel job via extra vars
    ingest_endpoint: "{{ ingest_endpoint }}"

  pre_tasks:
    - name: Display deployment information
      debug:
        msg: |
          Deploying Node Pulse Agent to {{ inventory_hostname }}
          Ingest Endpoint: {{ ingest_endpoint }}

    - name: Ensure server is reachable
      wait_for_connection:
        timeout: 30
      register: connection_test
      ignore_errors: yes

    - name: Fail if server is unreachable
      fail:
        msg: "Server {{ inventory_hostname }} is unreachable"
      when: connection_test is failed

    - name: Check if a time synchronization service is already running
      shell: systemctl list-units --type=service --state=running | grep -E 'ntp|chrony|timesyncd'
      register: time_service_check
      changed_when: false
      failed_when: false

    - name: Ensure systemd-timesyncd is running (Debian/Ubuntu)
      block:
        - name: Enable and start systemd-timesyncd
          systemd:
            name: systemd-timesyncd
            state: started
            enabled: yes
          ignore_errors: yes

        - name: Install chrony if systemd-timesyncd is not available
          apt:
            name: chrony
            state: present
            update_cache: yes
          ignore_errors: yes

        - name: Start chrony if installed
          systemd:
            name: chrony
            state: started
            enabled: yes
          ignore_errors: yes
      when:
        - ansible_os_family == "Debian"
        - time_service_check.rc != 0

    - name: Install and configure chrony (RHEL/CentOS/Fedora/Rocky/AlmaLinux)
      block:
        - name: Install chrony
          package:
            name: chrony
            state: present

        - name: Ensure chrony service is running and enabled
          systemd:
            name: chronyd
            state: started
            enabled: yes
      when:
        - ansible_os_family == "RedHat"
        - time_service_check.rc != 0

    - name: Install and configure chrony (Arch Linux)
      block:
        - name: Install chrony
          pacman:
            name: chrony
            state: present

        - name: Ensure chrony service is running and enabled
          systemd:
            name: chronyd
            state: started
            enabled: yes
      when:
        - ansible_os_family == "Archlinux"
        - time_service_check.rc != 0

    - name: Install and configure chrony (SUSE/openSUSE)
      block:
        - name: Install chrony
          zypper:
            name: chrony
            state: present

        - name: Ensure chrony service is running and enabled
          systemd:
            name: chronyd
            state: started
            enabled: yes
      when:
        - ansible_os_family == "Suse"
        - time_service_check.rc != 0

    - name: Install and configure chrony (Alpine Linux)
      block:
        - name: Install chrony
          apk:
            name: chrony
            state: present

        - name: Ensure chrony service is running and enabled
          service:
            name: chronyd
            state: started
            enabled: yes
      when:
        - ansible_os_family == "Alpine"
        - time_service_check.rc != 0

    - name: Fallback - Try systemd-timesyncd for unsupported distros
      block:
        - name: Enable and start systemd-timesyncd as fallback
          systemd:
            name: systemd-timesyncd
            state: started
            enabled: yes
          ignore_errors: yes
      when:
        - ansible_os_family not in ["Debian", "RedHat", "Archlinux", "Suse", "Alpine"]
        - time_service_check.rc != 0

    - name: Wait for time sync (may take a few seconds)
      pause:
        seconds: 5

    - name: Check time synchronization status
      command: timedatectl
      register: timedatectl_output
      changed_when: false

    - name: Display time synchronization status
      debug:
        msg: "{{ timedatectl_output.stdout_lines }}"

  roles:
    - role: ../../roles/nodepulse-agent

  post_tasks:
    - name: Verify agent is running
      systemd:
        name: nodepulse
        state: started
        enabled: yes
      register: agent_status

    - name: Display deployment summary
      debug:
        msg: |
          ✓ Agent deployed successfully to {{ inventory_hostname }}
          ✓ Service is {{ agent_status.status.ActiveState }}
          ✓ Enabled at boot: {{ agent_status.status.UnitFileState }}
