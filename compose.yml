x-common-variables: &common-variables
  DATABASE_URL: &database-url postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-node_pulse_admiral}

services:
  # PostgreSQL 18 - Main Database
  postgres:
    image: postgres:18-alpine@sha256:f898ac406e1a9e05115cc2efcb3c3abb3a92a4c0263f3b6f6aaae354cbb1953a
    container_name: node-pulse-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      <<: *common-variables
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-node_pulse_admiral}
    volumes:
      - ./postgres_data:/var/lib/postgresql
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER:-postgres}
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node-pulse-admiral

  # Valkey - Redis alternative for caching and sessions
  valkey:
    image: valkey/valkey:latest@sha256:81db6d39e1bba3b3ff32bd3a1b19a6d69690f94a3954ec131277b9a26b95b3aa
    container_name: node-pulse-valkey
    restart: unless-stopped
    env_file:
      - .env
    command: valkey-server --appendonly yes --requirepass ${VALKEY_PASSWORD:-valkeypassword}
    volumes:
      - ./valkey_data:/data
    healthcheck:
      test:
        - CMD
        - valkey-cli
        - --raw
        - incr
        - ping
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node-pulse-admiral

  # Flagship Migration - Run database migrations (idempotent)
  flagship-migrate:
    build:
      context: .
      dockerfile: ./migrate/Dockerfile
    container_name: node-pulse-flagship-migrate
    env_file:
      - .env
    environment:
      <<: *common-variables
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - node-pulse-admiral
    restart: "no"

  # Kratos Migration - Run Kratos schema migrations (idempotent)
  kratos-migrate:
    image: oryd/kratos:v1.3.0@sha256:ba79570c5f7da0e73785ddba0ff5ac4f693e26ad54dd6149423598510fb80552
    container_name: node-pulse-kratos-migrate
    env_file:
      - .env
    environment:
      <<: *common-variables
      DSN: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-node_pulse_admiral}?sslmode=disable&search_path=kratos
    volumes:
      - ./kratos:/etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    depends_on:
      postgres:
        condition: service_healthy
      flagship-migrate:
        condition: service_completed_successfully
    networks:
      - node-pulse-admiral
    restart: "no"

  # Ory Kratos - Identity and User Management
  kratos:
    image: oryd/kratos:v1.3.0@sha256:ba79570c5f7da0e73785ddba0ff5ac4f693e26ad54dd6149423598510fb80552
    container_name: node-pulse-kratos
    restart: unless-stopped
    env_file:
      - .env
    environment:
      <<: *common-variables
      DSN: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-node_pulse_admiral}?sslmode=disable&search_path=kratos
      LOG_LEVEL: ${KRATOS_LOG_LEVEL:-info}
    volumes:
      - ./kratos:/etc/config/kratos
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    ports:
      - "4433:4433" # public API
      - "4434:4434" # admin API
    depends_on:
      postgres:
        condition: service_healthy
      kratos-migrate:
        condition: service_completed_successfully
    healthcheck:
      test:
        - CMD
        - wget
        - --spider
        - --quiet
        - http://localhost:4434/health/ready
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node-pulse-admiral

  # Go-Gin Submarines Ingest - Agent Metrics Ingestion (HTTP -> Valkey Stream)
  submarines-ingest:
    image: ghcr.io/node-pulse/node-pulse-submarines-ingest:latest
    container_name: node-pulse-submarines-ingest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      <<: *common-variables
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-node_pulse_admiral}
      DB_SCHEMA: submarines
      DB_SSLMODE: disable

      # Valkey
      VALKEY_HOST: valkey
      VALKEY_PORT: 6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD:-valkeypassword}

      # Kratos
      KRATOS_PUBLIC_URL: http://kratos:4433
      KRATOS_ADMIN_URL: http://kratos:4434

      # Server
      PORT: ${INGEST_PORT:-8080}
      GIN_MODE: ${GIN_MODE:-release}

      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
      kratos:
        condition: service_healthy
    networks:
      - node-pulse-admiral

  # Go Submarines Digest - Background processor (Valkey Stream -> PostgreSQL)
  submarines-digest:
    image: ghcr.io/node-pulse/node-pulse-submarines-digest:latest
    container_name: node-pulse-submarines-digest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      <<: *common-variables
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-node_pulse_admiral}
      DB_SCHEMA: submarines
      DB_SSLMODE: disable

      # Valkey
      VALKEY_HOST: valkey
      VALKEY_PORT: 6379
      VALKEY_PASSWORD: ${VALKEY_PASSWORD:-valkeypassword}

      # Digest settings
      DIGEST_ID: ${DIGEST_ID:-digest-1}
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    networks:
      - node-pulse-admiral

  # Go Submarines Status - Public status pages and badges (read-only)
  submarines-status:
    image: ghcr.io/node-pulse/node-pulse-submarines-status:latest
    container_name: node-pulse-submarines-status
    restart: unless-stopped
    env_file:
      - .env
    environment:
      <<: *common-variables
      # Database (read-only)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-node_pulse_admiral}
      DB_SCHEMA: submarines
      DB_SSLMODE: disable

      # Server
      PORT: 8082
      GIN_MODE: ${GIN_MODE:-release}
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - node-pulse-admiral

  # Rails Flagship - Admin Dashboard & Karafka Consumer
  flagship:
    image: ghcr.io/node-pulse/node-pulse-flagship:latest
    container_name: node-pulse-flagship
    restart: unless-stopped
    env_file:
      - .env
    environment:
      <<: *common-variables
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-node_pulse_admiral}
      DB_SCHEMA: flagship

      # Valkey for sessions and cache
      REDIS_URL: redis://:${VALKEY_PASSWORD:-valkeypassword}@valkey:6379/1

      # Submarines API endpoint (server-side)
      SUBMARINES_API_URL: http://submarines-ingest:8080

      # Rails
      RAILS_ENV: ${RAILS_ENV:-production}
      RAILS_MAX_THREADS: 5
      SECRET_KEY_BASE: ${SECRET_KEY_BASE:-development-secret-key-change-in-production}

      # Rails 8 Solid adapters
      SOLID_CACHE_URL: redis://:${VALKEY_PASSWORD:-valkeypassword}@valkey:6379/2
      SOLID_QUEUE_URL: redis://:${VALKEY_PASSWORD:-valkeypassword}@valkey:6379/3
      SOLID_CABLE_URL: redis://:${VALKEY_PASSWORD:-valkeypassword}@valkey:6379/4
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
      flagship-migrate:
        condition: service_completed_successfully
      submarines-ingest:
        condition: service_started
    volumes:
      - ./logs/flagship:/app/log
    networks:
      - node-pulse-admiral

  # Next.js Cruiser - Public Site
  cruiser:
    image: ghcr.io/node-pulse/node-pulse-cruiser:latest
    container_name: node-pulse-cruiser
    restart: unless-stopped
    env_file:
      - .env
    environment:
      <<: *common-variables
      # Public URLs (accessible from browser)
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      NEXT_PUBLIC_KRATOS_URL: ${NEXT_PUBLIC_KRATOS_URL:-http://localhost:4433}

      # Server-side URLs
      API_URL: http://submarines-ingest:8080
      KRATOS_PUBLIC_URL: http://kratos:4433
      KRATOS_ADMIN_URL: http://kratos:4434

      # Better Auth
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-your-better-auth-secret}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}
    ports:
      - "3001:3000"
    depends_on:
      - submarines-ingest
      - postgres
    networks:
      - node-pulse-admiral

  # Traefik - Reverse Proxy (Production)
  traefik:
    image: traefik:v3.2
    container_name: node-pulse-traefik
    restart: unless-stopped
    env_file:
      - .env
    environment:
      <<: *common-variables
      DOMAIN: ${DOMAIN:-yourdomain.com}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.production.yml:/etc/traefik/dynamic/dynamic.yml:ro
      - ./traefik_data/letsencrypt:/letsencrypt
      - ./logs/traefik:/var/log/traefik
    depends_on:
      - cruiser
      - flagship
      - submarines-ingest
      - submarines-status
      - kratos
    networks:
      - node-pulse-admiral

networks:
  node-pulse-admiral:
    driver: bridge
    name: node-pulse-admiral
